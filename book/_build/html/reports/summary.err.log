Traceback (most recent call last):
  File "/home/lukem/anaconda3/lib/python3.11/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/home/lukem/anaconda3/lib/python3.11/site-packages/nbclient/client.py", line 1305, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/lukem/anaconda3/lib/python3.11/site-packages/jupyter_core/utils/__init__.py", line 173, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/lukem/anaconda3/lib/python3.11/asyncio/base_events.py", line 653, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/home/lukem/anaconda3/lib/python3.11/site-packages/nbclient/client.py", line 705, in async_execute
    await self.async_execute_cell(
  File "/home/lukem/anaconda3/lib/python3.11/site-packages/nbclient/client.py", line 1058, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/home/lukem/anaconda3/lib/python3.11/site-packages/nbclient/client.py", line 914, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import pathlib
import datetime as dt
import pandas as pd
import copy
from myst_nb import glue

logsdir = pathlib.Path('../data')
hubs=['colhub_global', 'scihub', 'esahub_global', 'colhub_AOI']
products=['S1', 'S2L1C', 'S2L2A', 'S3', 'S5p']

data_FE = None
for h in hubs:
    csvfile = logsdir / f'products_in_{h}.csv'
    data_tmp = pd.read_csv(csvfile, header=None, names=['product', 'area', 'sensing_date', f'{h}'], parse_dates=['sensing_date'])
    # If several sensing date exist, keep the most recent one
    data_clean = copy.deepcopy(data_tmp.drop_duplicates(subset=['sensing_date', 'product', 'area'], keep='last'))
    if h == 'colhub_AOI':
        data_clean['area'] = 'colhub_aoi'
    if data_FE is None:
        data_FE = data_clean
    else:
        data_FE = data_FE.merge(data_clean, on=['sensing_date', 'product', 'area'], how='outer')
        
data_BE = None
areas = ['AOI']
for a in areas:
    for p in products:
        csvfile = logsdir / f'products_in_BE_{p}_{a}.csv'
        data_tmp = pd.read_csv(csvfile, header=None, names=['product', 'area', 'sensing_date', 'BE'], parse_dates=['sensing_date'])
        # If several sensing date exist, keep the most recent one
        data_clean = copy.deepcopy(data_tmp.drop_duplicates(subset=['sensing_date', 'product', 'area'], keep='last'))
        if a == 'AOI':
            data_clean['area'] = 'colhub_aoi'
        if data_BE is None:
            data_BE = data_clean
        else:
            data_BE = data_BE.append(data_clean)
            
data = data_FE.merge(data_BE, on=['sensing_date', 'product', 'area'], how='outer')
data.set_index('sensing_date', inplace=True)
data.sort_index(inplace=True)
data.fillna(0, inplace=True)

mask_s1 = (data['product'] == 'S1') & (data['area'] == 'colhub_aoi')
data_s1 = data.loc[mask_s1][-30:][['colhub_global', 'scihub', 'colhub_AOI', 'BE']].copy()
col_s1 = data_s1['colhub_global'].sum()
arc_s1 = data_s1['colhub_AOI'].sum()
sci_s1 = data_s1['scihub'].sum()
be_s1 = data_s1['BE'].sum()

mask_s2l1 = (data['product'] == 'S2L1C') & (data['area'] == 'colhub_aoi')
data_s2l1 = data.loc[mask_s2l1][-30:][['colhub_global', 'scihub', 'colhub_AOI', 'BE']].copy()
col_s2l1 = data_s2l1['colhub_global'].sum()
arc_s2l1 = data_s2l1['colhub_AOI'].sum()
sci_s2l1 = data_s2l1['scihub'].sum()
be_s2l1 = data_s2l1['BE'].sum()

mask_s2l2 = (data['product'] == 'S2L2A') & (data['area'] == 'colhub_aoi')
data_s2l2 = data.loc[mask_s2l2][-30:][['colhub_global', 'scihub', 'colhub_AOI', 'BE']].copy()
col_s2l2 = data_s2l2['colhub_global'].sum()
arc_s2l2 = data_s2l2['colhub_AOI'].sum()
sci_s2l2 = data_s2l2['scihub'].sum()
be_s2l2 = data_s2l2['BE'].sum()

mask_s3 = (data['product'] == 'S3') & (data['area'] == 'colhub_aoi')
data_s3 = data.loc[mask_s3][-30:][['colhub_global', 'scihub', 'colhub_AOI', 'BE']].copy()
col_s3 = data_s3['colhub_global'].sum()
arc_s3 = data_s3['colhub_AOI'].sum()
sci_s3 = data_s3['scihub'].sum()
be_s3 = data_s3['BE'].sum()

mask_s5 = (data['product'] == 'S5p') & (data['area'] == 'colhub_aoi')
data_s5 = data.loc[mask_s5][-30:][['colhub_global', 'scihub', 'colhub_AOI', 'BE']].copy()
col_s5 = data_s5['colhub_global'].sum()
arc_s5 = data_s5['colhub_AOI'].sum()
sci_s5 = data_s5['scihub'].sum()
be_s5 = data_s5['BE'].sum()
------------------


[0;31m---------------------------------------------------------------------------[0m
[0;31mAttributeError[0m                            Traceback (most recent call last)
[0;32m/tmp/ipykernel_32123/1792926152.py[0m in [0;36m?[0;34m()[0m
[1;32m     33[0m             [0mdata_clean[0m[0;34m[[0m[0;34m'area'[0m[0;34m][0m [0;34m=[0m [0;34m'colhub_aoi'[0m[0;34m[0m[0;34m[0m[0m
[1;32m     34[0m         [0;32mif[0m [0mdata_BE[0m [0;32mis[0m [0;32mNone[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m     35[0m             [0mdata_BE[0m [0;34m=[0m [0mdata_clean[0m[0;34m[0m[0;34m[0m[0m
[1;32m     36[0m         [0;32melse[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m---> 37[0;31m             [0mdata_BE[0m [0;34m=[0m [0mdata_BE[0m[0;34m.[0m[0mappend[0m[0;34m([0m[0mdata_clean[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m     38[0m [0;34m[0m[0m
[1;32m     39[0m [0mdata[0m [0;34m=[0m [0mdata_FE[0m[0;34m.[0m[0mmerge[0m[0;34m([0m[0mdata_BE[0m[0;34m,[0m [0mon[0m[0;34m=[0m[0;34m[[0m[0;34m'sensing_date'[0m[0;34m,[0m [0;34m'product'[0m[0;34m,[0m [0;34m'area'[0m[0;34m][0m[0;34m,[0m [0mhow[0m[0;34m=[0m[0;34m'outer'[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m     40[0m [0mdata[0m[0;34m.[0m[0mset_index[0m[0;34m([0m[0;34m'sensing_date'[0m[0;34m,[0m [0minplace[0m[0;34m=[0m[0;32mTrue[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/anaconda3/lib/python3.11/site-packages/pandas/core/generic.py[0m in [0;36m?[0;34m(self, name)[0m
[1;32m   6200[0m             [0;32mand[0m [0mname[0m [0;32mnot[0m [0;32min[0m [0mself[0m[0;34m.[0m[0m_accessors[0m[0;34m[0m[0;34m[0m[0m
[1;32m   6201[0m             [0;32mand[0m [0mself[0m[0;34m.[0m[0m_info_axis[0m[0;34m.[0m[0m_can_hold_identifiers_and_holds_name[0m[0;34m([0m[0mname[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m   6202[0m         ):
[1;32m   6203[0m             [0;32mreturn[0m [0mself[0m[0;34m[[0m[0mname[0m[0;34m][0m[0;34m[0m[0;34m[0m[0m
[0;32m-> 6204[0;31m         [0;32mreturn[0m [0mobject[0m[0;34m.[0m[0m__getattribute__[0m[0;34m([0m[0mself[0m[0;34m,[0m [0mname[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m
[0;31mAttributeError[0m: 'DataFrame' object has no attribute 'append'

